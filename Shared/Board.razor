@{
    string status;

    if (gameStatus == GameStatus.NotYetFiniched)
        gameStatus = GameProgram.CalculateGameStatus(squares);

    switch (gameStatus)
    {
        case GameStatus.WaitForStart:
            status = $"Comienza el juego!";
            break;
        case GameStatus.InitState:
            status = $"Selecciona una ficha!";
            break;
        case GameStatus.XWins:
            status = $"Gana: {GameMarks.X}";
            break;
        case GameStatus.OWins:
            status = $"Gana: {GameMarks.O}";
            break;
        case GameStatus.Draw:
            status = "Empate!";
            break;
        default:
            char nextPlayer = movement == GameMarks.X ? GameMarks.X : GameMarks.O;
            status = $"Siguiente jugador: {nextPlayer}";
            break;
    }

    <h3>@status</h3>
}

<section class="board-content">

    <div class="board">
        @for (int i = 0; i < 9; i++)
        {
            int squareNumber = i;
            <Square @key=squareNumber value=squares[squareNumber]
            ClickHandler="@(() => MovementPlayerHandler(squareNumber))" />
        }
    </div>

    <div class="game-mark-content">
        <span class="@((player == GameMarks.X) ? "game-mark-active" : "") game-mark"
            @onclick="@(() => SelectMarkHandler(GameMarks.X))">@GameMarks.X</span>
        <span class="@((player == GameMarks.O) ? "game-mark-active" : "") game-mark"
            @onclick="@(() => SelectMarkHandler(GameMarks.O))">@GameMarks.O</span>
    </div>

    <button class="btn" @onclick="PlayOrPauseGameHandler">
        @(gameStatus == GameStatus.InitState || gameStatus == GameStatus.WaitForStart ? "JUGAR" : "REINICIAR")
    </button>

</section>

@code {
    private char player;
    private char computer;
    private char movement;

    private char[] squares = new char[9];
    private char[] randomMarks = new[] { GameMarks.X, GameMarks.O };

    Random random = new();
    GameStatus gameStatus;

    protected override void OnInitialized()
    {
        InitState();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
            return;

        MovementAIHandler();
    }

    private void SelectMarkHandler(char mark)
    {
        player = mark;
        computer = (mark == GameMarks.X ? GameMarks.O : GameMarks.X);

        gameStatus = GameStatus.WaitForStart;
    }

    private void PlayOrPauseGameHandler()
    {
        if (player == GameMarks.Blank)
            return;

        if (gameStatus != GameStatus.InitState && gameStatus != GameStatus.WaitForStart)
        {
            InitState();
            return;
        }

        movement = randomMarks[random.Next(randomMarks.Length)];
        gameStatus = GameStatus.NotYetFiniched;
    }

    private void MovementPlayerHandler(int i)
    {
        if (gameStatus == GameStatus.InitState || gameStatus == GameStatus.WaitForStart)
            return;

        if (squares[i] != ' ')
            return;

        bool isGameFiniched = GameProgram.CalculateGameStatus(squares) != GameStatus.NotYetFiniched;

        if (isGameFiniched)
            return;

        squares[i] = player;
        movement = (movement == GameMarks.X ? GameMarks.O : GameMarks.X);
    }

    private void MovementAIHandler()
    {
        if (gameStatus == GameStatus.InitState || gameStatus == GameStatus.WaitForStart)
            return;

        if (movement != computer)
            return;

        bool isGameFiniched = GameProgram.CalculateGameStatus(squares) != GameStatus.NotYetFiniched;

        if (isGameFiniched)
            return;

        int count = 0;
        int i = random.Next(0, 8);

        while (squares[i] != GameMarks.Blank)
        {
            i = random.Next(0, 8);
            count++;

            if (count > 8)
                break;
        }

        squares[i] = computer;
        movement = (movement == GameMarks.X ? GameMarks.O : GameMarks.X);

        StateHasChanged();
    }

    private void InitState()
    {
        player = GameMarks.Blank;
        computer = GameMarks.Blank;
        movement = GameMarks.Blank;

        gameStatus = GameStatus.InitState;

        squares = new char[9]
        {
' ', ' ', ' ',
' ', ' ', ' ',
' ', ' ', ' '
        };
    }
}
